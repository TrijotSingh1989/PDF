qnorm(0.025,0,1)
qnorm(1-0.025,0,1)
1-sum(dnorm(seq(0:11), 10, sqrt(5)))
pnorm(3.5,5.5,1.25)
pnorm((3.5/5.5)/sqrt(1.25),0,1)
pnorm((3.5-5.5)/sqrt(1.25),0,1)
Data3 <- c(27.16,28.6,32.41,34.28,35.77,42.3,48.51,54.4,56.23,63.36,71.07,76.35,84.42,89.78,104.93,108.59,119.69,135.95,143.76,158.95)
z_x <- ((Data1-Data3)/sqrt(Data3))
Data1 <- c(39,43,34,31,23,50,48,43,48,47,62,63,84,86,120,121,122,162,151,184)
Data2 <- c(38.85,43.87,33.37,28.26,30.02,39.39,46.93,49.60,46.09,48.58,55.93,66.35,82.33,94.00,111.72,116.26,132.62,154.72,152.62,183.82)
z_x <- ((Data1-Data3)/sqrt(Data3))
z_x_2 <- (z_x)^2
mean(z_x_2)
mean(z_x)
z1x <- z_x[1:19]
z2x <- z_x[2:20]
cor(z1x,z2x)
cor(z1x,z2x) * sqrt(20)
x = 13.5
mu = 20
sigma = sqrt(10)
pnorm((x-mu)/sqrt(sigma),0,1)
x = 13.5
mu = 20
sigma = (10)
pnorm((x-mu)/sqrt(sigma),0,1)
x = 4.5
mu = 3.5
sigma = (1.75)
pnorm((x-mu)/sqrt(sigma),0,1)
x = 9
mu = 4.5
sigma = (1.055)
pnorm((x-mu)/sqrt(sigma),0,1)
x = 9
mu = 4.8
sigma = (1.152)
pnorm((x-mu)/sqrt(sigma),0,1)
y = c( -2, -3)
x = Data1[ Data1 >= y[1] & Data1 <= y[2]]
x
y = c( -3, -2)
x = Data1[ Data1 >= y[1] & Data1 <= y[2]]
x
y = c( -2, -1)
x = Data1[ Data1 >= y[1] & Data1 <= y[2]]
x
y = c( -1, 0)
x = Data1[ Data1 >= y[1] & Data1 <= y[2]]
x
y = c( -3, -2)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( -2, -1)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
z_x <- ((Data1-Data2)/sqrt(Data2))
y = c( -2, -1)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( -3, -2)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( -1, 0)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( 0,1)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( 1,2)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
y = c( 2,3)
x = z_x[ z_x >= y[1] & z_x <= y[2]]
x
O <- c(0,0,1,7,11,1,0,0)
E <- c(0,0.4,2.8,6.8,6.8,2.8,0.4,0)
zx <- ((O-E)^2)/E
zx[is.nan(zx)] <- 0
sum(zx)
1-pchisq(sum(zx),11)
O <- c(286,805,1548,755,464)
E <- c(308.64,848.76,1543.20,733.02,424.38)
obs.test.stat = sum(((O-E)^2)/E)
TS = 1-pchisq(obs.test.stat,4)
TS*100
1-pchisq(sum(zx),11)
(1-pchisq(sum(zx),11))*100
O <- c(0,0,1,7,11,1,0,0)
E <- c(0,0.4,2.8,6.8,6.8,2.8,0.4,0)
zx <- ((O-E)^2)/E
zx[is.nan(zx)] <- 0
sum(zx)
(1-pchisq(sum(zx),11))*100
(1-pchisq(sum(zx),3))*100
x = 8.5
mu = 9.375
sigma = (2.192)
pnorm((x-mu)/sqrt(sigma),0,1)
Age <- c(50:60)
Ec <- c(23308,19316,16914,21082,14820,24084,28076,22958,24960,21134,18374)
Age <- c(50:60)
Ec <- c(23308,19316,16914,21082,14820,24084,28076,22958,24960,21134,18374)
D <- c(70,58,54,90,70,96,114,86,102,86,94)
G_R <- c(0.00368,0.00379,0.00391,0.00402,,0.00415,0.00428,0.00441,0.00455,0.00469,0.00485,0.00500)
Age <- c(50:60)
Ec <- c(23308,19316,16914,21082,14820,24084,28076,22958,24960,21134,18374)
D <- c(70,58,54,90,70,96,114,86,102,86,94)
G_R <- c(0.00368,0.00379,0.00391,0.00402,0.00415,0.00428,0.00441,0.00455,0.00469,0.00485,0.00500)
Age <- c(50:60)
Ec <- c(23308,19316,16914,21082,14820,24084,28076,22958,24960,21134,18374)
O <- c(70,58,54,90,70,96,114,86,102,86,94)
G_R <- c(0.00368,0.00379,0.00391,0.00402,0.00415,0.00428,0.00441,0.00455,0.00469,0.00485,0.00500)
Age <- c(50:60)
Ec <- c(23308,19316,16914,21082,14820,24084,28076,22958,24960,21134,18374)
O <- c(70,58,54,90,70,96,114,86,102,86,94)
G_R <- c(0.00368,0.00379,0.00391,0.00402,0.00415,0.00428,0.00441,0.00455,0.00469,0.00485,0.00500)
E <- Ec*G_R
zx <- (O-E)/sqrt(E)
zx<=0
x = 3
mu = 11/2
sigma = (11/4)
pnorm((x-mu)/sqrt(sigma),0,1)
x = 3
mu = 11/2
sigma = (11/4)
pnorm((x-mu)/sqrt(sigma),0,1)*100
zx_2 <- zx^2
sum(zx_2)
1-pchisq(sum(zx_2),9)
?pchisq
pchisq(35,20)
pchisq(35,20,lower.tail = TRUE)
pchisq(35,20,lower.tail = FALSE)
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
library("vctrs", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
detach("package:vctrs", unload=TRUE)
remove.packages("vctrs")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
install.packages("devtools")
library("remotes", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
detach("package:remotes", unload=TRUE)
remove.packages("remotes")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
remove.packages("remotes")
install.packages("dplyr")
install.packages("tidyverse")
remove.packages("vctrs")
library("vctrs", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
detach("package:vctrs", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("gridExtra")
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
library("rlang", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("vctrs", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("vctrs")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
library("xfun", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("xfun")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
xfunx
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
install.packages("devtools")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
# Or the development version from GitHub
install.packages("devtools")
devtools::install_github("tidyverse/tidyverse")
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
library(shiny); source('Documents/GitHub/PDF/test.R')
getwd()
setwd('/Users/TJIpadAccess/Documents/Github/PDF')
source('test.R')
library(shiny)
ui <- fluidPage(
actionButton("exe", "Run", style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
mainPanel(plotOutput('myplot'))
)
server <- function(input, output, session) {
ga_data <- eventReactive(input$exe, {
the_date <- as.Date(c('2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05'))
users <- c(346, 223, 167, 431, 293)
employ.data <- data.frame(the_date, users)
#Store the sum of the column 'users' in a global variable, so we can use it anywhere later
employ.data.sum <<- sum(employ.data$users, na.rm = TRUE)
showNotification(paste("The sum of the column 'users' has been stored and is ready to use anywhere. Its", employ.data.sum))
employ.data
})
output$myplot <- renderPlot({
req(ga_data())
plot(employ.data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
actionButton("exe", "Run", style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
mainPanel(plotOutput('myplot'))
)
server <- function(input, output, session) {
ga_data <- eventReactive(input$exe, {
the_date <- as.Date(c('2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05'))
users <- c(346, 223, 167, 431, 293)
employ.data <- data.frame(the_date, users)
#Store the sum of the column 'users' in a global variable, so we can use it anywhere later
employ.data.sum <<- sum(employ.data$users, na.rm = TRUE)
showNotification(paste("The sum of the column 'users' has been stored and is ready to use anywhere. Its", employ.data.sum))
employ.data
})
output$myplot <- renderPlot({
req(ga_data())
plot(employ.data)
})
}
shinyApp(ui = ui, server = server)
the_date <- as.Date(c('2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05'))
users <- c(346, 223, 167, 431, 293)
employ.data <- data.frame(the_date, users)
View(employ.data)
library(shiny)
ui <- fluidPage(
actionButton("exe", "Run", style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
mainPanel(plotOutput('myplot'))
)
server <- function(input, output, session) {
ga_data <- eventReactive(input$exe, {
the_date <- as.Date(c('2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05'))
users <- c(346, 223, 167, 431, 293)
employ.data <- data.frame(the_date, users)
#Store the sum of the column 'users' in a global variable, so we can use it anywhere later
employ.data.sum <<- sum(employ.data$users, na.rm = TRUE)
showNotification(paste("The sum of the column 'users' has been stored and is ready to use anywhere. Its", employ.data.sum))
employ.data
})
output$myplot <- renderPlot({
req(ga_data())
plot(employ.data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(stringr)
library(DT)
library(shinydashboard)
library(scales)
library(dplyr)
library("shinycustomloader")
data <- structure(
list(
Date = c(
"2016-01", "2016-02", "2016-03", "2016-04", "2016-05", "2016-06",
"2016-07", "2016-08", "2016-09", "2016-10", "2016-11", "2016-12",
"2017-01", "2017-02", "2017-03", "2017-04", "2017-05", "2017-06",
"2017-07", "2017-08", "2017-09", "2017-10", "2017-11", "2017-12",
"2018-01", "2018-02", "2018-03", "2018-04", "2018-05", "2018-06",
"2018-07", "2018-08", "2018-09", "2018-10", "2018-11", "2018-12"
),
County = c(
"county1", "county3", "county2", 'county2', 'county7', 'county9',
"county4", "county9", "county1", "county2", "county2", "county8",
"county2", "county5", "county6", "county5", "county7", "county9",
"county5", "county3", "county6", "county4", "county5", 'county1',
'county2', 'county7', 'county9', 'county5', 'county4', 'county1',
'county3', 'county5', 'county2', 'county9', 'county6', 'county3'),
`Brand Name` = c(
"Oreo", "Lindt", "Snickers", "OMO", "Oreo", "Lindt",
"Snickers", "OMO", "Oreo", "Lindt", "Lindt", "Snickers",
"Oreo", "Lindt", "Snickers", "OMO", "Oreo", "Lindt",
"Snickers", "OMO", "Oreo", "Lindt", "Lindt", "Snickers",
"OMO", "Oreo", "Lindt", "Snickers", "OMO", "Oreo",
"Lindt", "Snickers", "OMO", "OMO", "Oreo", "Lindt"
),
Profit = c(
3542.07, 6024.91, 4739.9, 2344.03, 3294.06, 7478.54, 4482.91,
2760.74, 4195.26, 6424.08, 7100.65, 5712.05, 3542.07, 6024.91,
4739.9, 2344.03, 3294.06, 7478.54, 4482.91, 2760.74, 4195.26,
6424.08, 7100.65, 5712.05, 2746.28, 5892.93, 9774.93, 6659.96,
3121.69, 4753.31, 9652.76, 5990.85, 2838.11, 3354.48, 4495.58,
10483.94
)
),
class = c("spec_tbl_df", "tbl_df", "tbl", "data.frame"),
row.names = c(NA, -36L),
spec = structure(
list(
cols = list(
Date = structure(
list(), class = c("collector_character", "collector")
),
`Brand Name` = structure(
list(), class = c("collector_character", "collector")
),
Profit = structure(
list(), class = c("collector_double", "collector")
)
),
default = structure(
list(), class = c("collector_guess", "collector")
),
skip = 1
),
class = "col_spec"
)
)
data<-as.data.frame(data)
jsCode <- "function() {var api = this.api();$( api.column(3).footer() ).html('Total: ' + MYTOTAL );}"
dropdownButton <- function(label = "", status = c("default", "primary", "success", "info", "warning", "danger"), ..., width = NULL) {
status <- match.arg(status)
# dropdown button content
html_ul <- list(
class = "dropdown-menu",
style = if (!is.null(width)) {
paste0("width: ", validateCssUnit(width), ";")
},
lapply(X = list(...), FUN = tags$li, style = "margin-left: 10px; margin-right: 10px;")
)
# dropdown button apparence
html_button <- list(
class = paste0("btn btn-", status, " dropdown-toggle"),
type = "button",
`data-toggle` = "dropdown"
)
html_button <- c(html_button, list(label))
html_button <- c(html_button, list(tags$span(class = "caret")))
# final result
tags$div(
class = "dropdown",
do.call(tags$button, html_button),
do.call(tags$ul, html_ul),
tags$script(
"$('.dropdown-menu').click(function(e) {
e.stopPropagation();
});"
)
)
}
# app ---------------------------------------------------------------------
ui <- fluidPage(
tags$h1("Example dropdown button"),
br(),
sidebarPanel(
sliderInput("yearrange", "Select Years",
min = 2016, max = 2018,
value = c(min, max)
),
sliderInput("monthrange", "Select Months",
min = 1, max = 12,
value = c(min, max)
),
dropdownButton(
label = "Choose Brand", status = "default", width = 80,
actionButton(inputId = "a2z", label = "Sort A to Z", icon = icon("sort-alpha-asc")),
actionButton(inputId = "z2a", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
br(),
actionButton(inputId = "all", label = "(Un)select all"),
checkboxGroupInput(inputId = "check2", label = "Choose", choices = unique(data$`Brand Name`))
),
dropdownButton(
label = "Choose County(ies)", status = "default", width = 80,
actionButton(inputId = "a2z_1", label = "Sort A to Z", icon = icon("sort-alpha-asc")),
actionButton(inputId = "z2a_1", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
br(),
actionButton(inputId = "all_1", label = "(Un)select all"),
checkboxGroupInput(inputId = "check3", label = "Choose", choices = unique(data$County))
)
),
mainPanel(
DT::dataTableOutput("table")
)
)
server <- function(input, output, session) {
# Select all / Unselect all for Brand Names
observeEvent(input$all, {
if (is.null(input$check2)) {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = unique(data$`Brand Name`)
)
} else {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = ""
)
}
})
# Select all / Unselect all for counties
observeEvent(input$all_1, {
if (is.null(input$check3)) {
updateCheckboxGroupInput(
session = session, inputId = "check3", selected = unique(data$County)
)
} else {
updateCheckboxGroupInput(
session = session, inputId = "check3", selected = ""
)
}
})
# Sorting asc for brand name
observeEvent(input$a2z, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = sort(unique(data$`Brand Name`)), selected = input$check2
)
})
# Sorting desc for brand name
observeEvent(input$z2a, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = sort(unique(data$`Brand Name`), decreasing = T), selected = input$check2
)
})
# Sorting asc for counties
observeEvent(input$a2z_1, {
updateCheckboxGroupInput(
session = session, inputId = "check3", choices = sort(unique(data$County)), selected = input$check3
)
})
# Sorting desc for counties
observeEvent(input$z2a_1, {
updateCheckboxGroupInput(
session = session, inputId = "check3", choices = sort(unique(data$County), decreasing = T), selected = input$check3
)
})
cont <- htmltools::withTags(table(tableFooter(c("", "", "", 0))))
output$table <- DT::renderDataTable({
selectedBrand <- input$check2 # gets selected brands
selectedCounty <- input$check3 # gets selected counties
data <- data[which(data$`Brand Name` %in% selectedBrand), ] # returns data matching selected brand
county_choice <- data[which(data$County %in% selectedCounty), ] # returns data matching selected counties
year_table <- county_choice[county_choice$Date >= input$yearrange[1] & county_choice$Date <= input$yearrange[2] + 1, ]
res_table <- year_table[unlist(stringr::str_split(year_table$Date, "-"))[c(F, T)] >= sprintf("%02d", input$monthrange[1]) & unlist(stringr::str_split(year_table$Date, "-"))[c(F, T)] <= sprintf("%02d", input$monthrange[2]), ]
jsCode <- sub("MYTOTAL", sum(res_table[, 4]), jsCode)
DT::datatable(res_table, container = cont,
rownames = F,
options = list(
autoWidth = T,
pageLength = 10,
scrollCollapse = T,
footerCallback = JS(jsCode))
)
})
}
shinyApp(ui = ui, server = server)
runApp('~/Checking.R')
install.packages("shinydashboard")
runApp('~/Checking.R')
install.packages("shinycustomloader")
runApp('~/Checking.R')
runApp('~/Checking.R')
runApp('~/Checking.R')
runApp('~/Checking.R')
